//
// ApiKeysAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ApiKeysAPI {
    /**
     Create new api key for current user
     
     - parameter body: (body)  
     - parameter userId: (query) User id for which api key should be applied (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createApiKey(body: CreateApiKeyBody, userId: UUID? = nil, completion: @escaping ((_ data: DisplayApiKey?,_ error: Error?) -> Void)) {
        createApiKeyWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new api key for current user
     - POST /api_keys
     - Requires scope `CreateApiKey`. When query param `user_id` is provided requires admin role.
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example={
  "expires_at" : "2000-01-23T04:56:07.000+00:00",
  "api_key" : "api_key",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "scopes" : [ "adminEmoji:destroy", "adminEmoji:destroy" ]
}}]
     
     - parameter body: (body)  
     - parameter userId: (query) User id for which api key should be applied (optional)

     - returns: RequestBuilder<DisplayApiKey> 
     */
    open class func createApiKeyWithRequestBuilder(body: CreateApiKeyBody, userId: UUID? = nil) -> RequestBuilder<DisplayApiKey> {
        let path = "/api_keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "user_id": userId
        ])

        let requestBuilder: RequestBuilder<DisplayApiKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete provided api key
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApiKey(_id: String, completion: @escaping ((_ data: DisplayApiKey?,_ error: Error?) -> Void)) {
        deleteApiKeyWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete provided api key
     - DELETE /api_keys/{id}
     - When key does not belong to current user requires Admin access
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example={
  "expires_at" : "2000-01-23T04:56:07.000+00:00",
  "api_key" : "api_key",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "scopes" : [ "adminEmoji:destroy", "adminEmoji:destroy" ]
}}]
     
     - parameter _id: (path)  

     - returns: RequestBuilder<DisplayApiKey> 
     */
    open class func deleteApiKeyWithRequestBuilder(_id: String) -> RequestBuilder<DisplayApiKey> {
        var path = "/api_keys/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DisplayApiKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Load api keys for user
     
     - parameter userId: (query) User id for which api key should be applied (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApiKeys(userId: UUID? = nil, completion: @escaping ((_ data: [DisplayApiKey]?,_ error: Error?) -> Void)) {
        listApiKeysWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Load api keys for user
     - GET /api_keys
     - If query param `user_id` is provided requires admin role.
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example=[ {
  "expires_at" : "2000-01-23T04:56:07.000+00:00",
  "api_key" : "api_key",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "scopes" : [ "adminEmoji:destroy", "adminEmoji:destroy" ]
}, {
  "expires_at" : "2000-01-23T04:56:07.000+00:00",
  "api_key" : "api_key",
  "name" : "name",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "scopes" : [ "adminEmoji:destroy", "adminEmoji:destroy" ]
} ]}]
     
     - parameter userId: (query) User id for which api key should be applied (optional)

     - returns: RequestBuilder<[DisplayApiKey]> 
     */
    open class func listApiKeysWithRequestBuilder(userId: UUID? = nil) -> RequestBuilder<[DisplayApiKey]> {
        let path = "/api_keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "user_id": userId
        ])

        let requestBuilder: RequestBuilder<[DisplayApiKey]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
