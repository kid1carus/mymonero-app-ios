//
// DiscountsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DiscountsAPI {
    /**
     Use random yat code
     
     - parameter codeId: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateRandomYatCode(codeId: UUID, body: RandomYatActivateBody, completion: @escaping ((_ data: DisplayOrder?,_ error: Error?) -> Void)) {
        activateRandomYatCodeWithRequestBuilder(codeId: codeId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Use random yat code
     - POST /codes/{code_id}/random_yat
     - Creates cart with random yat generated according to pattern with applied discount
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "misc_refunded_total_in_cents" : 0,
  "order_number" : "order_number",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "refunded_total_in_cents" : 6,
  "paid_at" : "2000-01-23T04:56:07.000+00:00",
  "total_in_cents" : 5,
  "expires_at" : "2000-01-23T04:56:07.000+00:00",
  "seconds_until_expiry" : 1,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "organization_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "eligible_for_refund" : true,
  "payment_method_data" : "",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "user" : "{}",
  "order_items" : [ "{}", "{}" ],
  "status" : "Cancelled"
}}]
     
     - parameter codeId: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<DisplayOrder> 
     */
    open class func activateRandomYatCodeWithRequestBuilder(codeId: UUID, body: RandomYatActivateBody) -> RequestBuilder<DisplayOrder> {
        var path = "/codes/{code_id}/random_yat"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code_id}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DisplayOrder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add pubkey for code
     
     - parameter codeId: (path)  
     - parameter pubkey: (path) Public key to authorize usage of a code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addPubkeyForCode(codeId: UUID, pubkey: String, completion: @escaping ((_ data: Pubkey?,_ error: Error?) -> Void)) {
        addPubkeyForCodeWithRequestBuilder(codeId: codeId, pubkey: pubkey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add pubkey for code
     - POST /codes/{code_id}/pubkeys/{pubkey}
     - NOTE: user should have scope `OrganizationCodeAdmin` or `CodeWrite`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example="74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f"}]
     
     - parameter codeId: (path)  
     - parameter pubkey: (path) Public key to authorize usage of a code 

     - returns: RequestBuilder<Pubkey> 
     */
    open class func addPubkeyForCodeWithRequestBuilder(codeId: UUID, pubkey: String) -> RequestBuilder<Pubkey> {
        var path = "/codes/{code_id}/pubkeys/{pubkey}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code_id}", with: codeIdPostEscape, options: .literal, range: nil)
        let pubkeyPreEscape = "\(pubkey)"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Pubkey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter codeType
     */
    public enum CodeType_listCodes: String { 
        case discount = "Discount"
        case randomYat = "RandomYat"
    }

    /**
     * enum for parameter dir
     */
    public enum Dir_listCodes: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    /**
     Fetch codes
     
     - parameter codeType: (query) Optional: filter by code type (optional)
     - parameter dir: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter organizationId: (query) Optional: filter by organization id (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listCodes(codeType: CodeType_listCodes? = nil, dir: Dir_listCodes? = nil, limit: Int? = nil, organizationId: UUID? = nil, page: Int? = nil, sort: String? = nil, completion: @escaping ((_ data: ListOfCodeAvailability?,_ error: Error?) -> Void)) {
        listCodesWithRequestBuilder(codeType: codeType, dir: dir, limit: limit, organizationId: organizationId, page: page, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch codes
     - GET /codes
     - Return codes with their usage and availability information NOTE: user should have scope `OrganizationCodeAdmin` or `CodeRead`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "data" : [ "{}", "{}" ],
  "paging" : "{}"
}}]
     
     - parameter codeType: (query) Optional: filter by code type (optional)
     - parameter dir: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter organizationId: (query) Optional: filter by organization id (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query)  (optional)

     - returns: RequestBuilder<ListOfCodeAvailability> 
     */
    open class func listCodesWithRequestBuilder(codeType: CodeType_listCodes? = nil, dir: Dir_listCodes? = nil, limit: Int? = nil, organizationId: UUID? = nil, page: Int? = nil, sort: String? = nil) -> RequestBuilder<ListOfCodeAvailability> {
        let path = "/codes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "code_type": codeType?.rawValue, 
            "dir": dir?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "organization_id": organizationId, 
            "page": page?.encodeToJSON(), 
            "sort": sort
        ])

        let requestBuilder: RequestBuilder<ListOfCodeAvailability>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Revoke pubkey for code
     
     - parameter codeId: (path)  
     - parameter pubkey: (path) Public key to authorize usage of a code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokePubkeyForCode(codeId: UUID, pubkey: String, completion: @escaping ((_ data: Pubkey?,_ error: Error?) -> Void)) {
        revokePubkeyForCodeWithRequestBuilder(codeId: codeId, pubkey: pubkey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Revoke pubkey for code
     - DELETE /codes/{code_id}/pubkeys/{pubkey}
     - NOTE: user should have scope `OrganizationCodeAdmin` or `CodeWrite`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example="74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f"}]
     
     - parameter codeId: (path)  
     - parameter pubkey: (path) Public key to authorize usage of a code 

     - returns: RequestBuilder<Pubkey> 
     */
    open class func revokePubkeyForCodeWithRequestBuilder(codeId: UUID, pubkey: String) -> RequestBuilder<Pubkey> {
        var path = "/codes/{code_id}/pubkeys/{pubkey}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code_id}", with: codeIdPostEscape, options: .literal, range: nil)
        let pubkeyPreEscape = "\(pubkey)"
        let pubkeyPostEscape = pubkeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pubkey}", with: pubkeyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Pubkey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
