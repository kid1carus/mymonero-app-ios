//
// UserInterestAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserInterestAPI {
    /**
     Destroys the user interest preventing this Emoji ID's notification emails from being sent for this user
     
     - parameter emojiId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserInterest(emojiId: String, completion: @escaping ((_ data: UserInterest?,_ error: Error?) -> Void)) {
        deleteUserInterestWithRequestBuilder(emojiId: emojiId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Destroys the user interest preventing this Emoji ID's notification emails from being sent for this user
     - DELETE /user_interests/{emoji_id}
     - NOTE: user should have scope `UserInterestDelete`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "emoji_id" : "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     
     - parameter emojiId: (path)  

     - returns: RequestBuilder<UserInterest> 
     */
    open class func deleteUserInterestWithRequestBuilder(emojiId: String) -> RequestBuilder<UserInterest> {
        var path = "/user_interests/{emoji_id}"
        let emojiIdPreEscape = "\(emojiId)"
        let emojiIdPostEscape = emojiIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emoji_id}", with: emojiIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserInterest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dir
     */
    public enum Dir_getInterestedUsers: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    /**
     Returns a paginated list of user interest records associated with the user
     
     - parameter dir: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInterestedUsers(dir: Dir_getInterestedUsers? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil, completion: @escaping ((_ data: ListOfUserInterest?,_ error: Error?) -> Void)) {
        getInterestedUsersWithRequestBuilder(dir: dir, limit: limit, page: page, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a paginated list of user interest records associated with the user
     - GET /user_interests
     - NOTE: user should have scope `UserInterestRead`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "data" : [ "{}", "{}" ],
  "paging" : "{}"
}}]
     
     - parameter dir: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query)  (optional)

     - returns: RequestBuilder<ListOfUserInterest> 
     */
    open class func getInterestedUsersWithRequestBuilder(dir: Dir_getInterestedUsers? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil) -> RequestBuilder<ListOfUserInterest> {
        let path = "/user_interests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dir": dir?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "sort": sort
        ])

        let requestBuilder: RequestBuilder<ListOfUserInterest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Given an EmojiId returns information about the user interest if a record exists for this user
     
     - parameter emojiId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserInterestForYat(emojiId: String, completion: @escaping ((_ data: UserInterest?,_ error: Error?) -> Void)) {
        getUserInterestForYatWithRequestBuilder(emojiId: emojiId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Given an EmojiId returns information about the user interest if a record exists for this user
     - GET /user_interests/{emoji_id}
     - NOTE: user should have scope `UserInterestRead`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "emoji_id" : "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     
     - parameter emojiId: (path)  

     - returns: RequestBuilder<UserInterest> 
     */
    open class func getUserInterestForYatWithRequestBuilder(emojiId: String) -> RequestBuilder<UserInterest> {
        var path = "/user_interests/{emoji_id}"
        let emojiIdPreEscape = "\(emojiId)"
        let emojiIdPostEscape = emojiIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emoji_id}", with: emojiIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserInterest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create new interest in emoji to be notified when available
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerInterest(body: NewUserInterestParameters, completion: @escaping ((_ data: UserInterest?,_ error: Error?) -> Void)) {
        registerInterestWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new interest in emoji to be notified when available
     - POST /user_interests
     - NOTE: user should have scope `UserInterestWrite`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "user_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "emoji_id" : "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<UserInterest> 
     */
    open class func registerInterestWithRequestBuilder(body: NewUserInterestParameters) -> RequestBuilder<UserInterest> {
        let path = "/user_interests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserInterest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
