//
// EmojiIDAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EmojiIDAPI {
    /**
     Edit EmojiId
     
     - parameter emojiId: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func edit(emojiId: String, body: EditRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        editWithRequestBuilder(emojiId: emojiId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit EmojiId
     - PATCH /emoji_id/{emoji_id}
     - Add and remove records in EmojiId, update merkle_root and signature too. Access notes: user expected to own the emoji's pubkey, have Admin role or be power member of organization if pubkey belongs to organization, otherwise operation will fail.
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emojiId: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<JSONValue> 
     */
    open class func editWithRequestBuilder(emojiId: String, body: EditRequest) -> RequestBuilder<JSONValue> {
        var path = "/emoji_id/{emoji_id}"
        let emojiIdPreEscape = "\(emojiId)"
        let emojiIdPostEscape = emojiIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emoji_id}", with: emojiIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get statistics for EmojiId
     
     - parameter eid: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStats(eid: String, completion: @escaping ((_ data: EmojiStatsResponse?,_ error: Error?) -> Void)) {
        getStatsWithRequestBuilder(eid: eid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get statistics for EmojiId
     - GET /emoji_id/{eid}/stats
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "emoji_id" : "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ",
  "metrics" : [ "{}", "{}" ]
}}]
     
     - parameter eid: (path)  

     - returns: RequestBuilder<EmojiStatsResponse> 
     */
    open class func getStatsWithRequestBuilder(eid: String) -> RequestBuilder<EmojiStatsResponse> {
        var path = "/emoji_id/{eid}/stats"
        let eidPreEscape = "\(eid)"
        let eidPostEscape = eidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eid}", with: eidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmojiStatsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Redirect by EmojiId link
     
     - parameter emojiId: (query)  
     - parameter link: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linkRedirect(emojiId: String, link: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        linkRedirectWithRequestBuilder(emojiId: emojiId, link: link).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Redirect by EmojiId link
     - GET /redirect
     - Will redirect to a link if it is part of Emoji ID
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     
     - parameter emojiId: (query)  
     - parameter link: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func linkRedirectWithRequestBuilder(emojiId: String, link: String) -> RequestBuilder<Void> {
        let path = "/redirect"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "emoji_id": emojiId, 
            "link": link
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List user's Emoji Ids
     
     - parameter organizationId: (query) Lookup emojis owned by &#x60;organization_id&#x60;,  requires organization power user role (optional)
     - parameter userId: (query) Lookup emojis owned by &#x60;user_id&#x60;,  requires Admin role (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(organizationId: UUID? = nil, userId: UUID? = nil, completion: @escaping ((_ data: [EmojiId]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(organizationId: organizationId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List user's Emoji Ids
     - GET /emoji_id
     - If no parameters provided will return all Emoji Ids of current user. When `user_id` or `organization_id` specified the endpoint will return the Emoji Ids owned by specified user or organization, requires Admin or organization power user access. Result is an array of emoji ids in display format (i.e. with all skin tone modifiers applied) `[\"ðŸ¤ŸðŸ¾ðŸ—ðŸ‘½ðŸ‘»\",\"ðŸŒˆðŸ‘ðŸ¿ðŸ’¯\"]`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example=[ "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ", "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ" ]}]
     
     - parameter organizationId: (query) Lookup emojis owned by &#x60;organization_id&#x60;,  requires organization power user role (optional)
     - parameter userId: (query) Lookup emojis owned by &#x60;user_id&#x60;,  requires Admin role (optional)

     - returns: RequestBuilder<[EmojiId]> 
     */
    open class func listWithRequestBuilder(organizationId: UUID? = nil, userId: UUID? = nil) -> RequestBuilder<[EmojiId]> {
        let path = "/emoji_id"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "organization_id": organizationId, 
            "user_id": userId
        ])

        let requestBuilder: RequestBuilder<[EmojiId]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List extended view user's Emoji Ids
     
     - parameter organizationId: (query) Lookup emojis owned by &#x60;organization_id&#x60;,  requires organization power user role (optional)
     - parameter userId: (query) Lookup emojis owned by &#x60;user_id&#x60;,  requires Admin role (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listExtended(organizationId: UUID? = nil, userId: UUID? = nil, completion: @escaping ((_ data: [EmojiListItem]?,_ error: Error?) -> Void)) {
        listExtendedWithRequestBuilder(organizationId: organizationId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List extended view user's Emoji Ids
     - GET /emoji_id/extended
     - Will return list of user's Emoji Ids with canonical and display representation. Display representation is Emoji Id with applied modifiers. If no parameters provided will return all Emoji Ids of the current user. When `user_id` or `organization_id` is specified the endpoint will return the Emoji Ids owned by the specified user or organization, requires Admin or organization power user access.
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example=[ {
  "display_format" : "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ",
  "canonical_format" : "canonical_format"
}, {
  "display_format" : "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ",
  "canonical_format" : "canonical_format"
} ]}]
     
     - parameter organizationId: (query) Lookup emojis owned by &#x60;organization_id&#x60;,  requires organization power user role (optional)
     - parameter userId: (query) Lookup emojis owned by &#x60;user_id&#x60;,  requires Admin role (optional)

     - returns: RequestBuilder<[EmojiListItem]> 
     */
    open class func listExtendedWithRequestBuilder(organizationId: UUID? = nil, userId: UUID? = nil) -> RequestBuilder<[EmojiListItem]> {
        let path = "/emoji_id/extended"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "organization_id": organizationId, 
            "user_id": userId
        ])

        let requestBuilder: RequestBuilder<[EmojiListItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Load value from EmojiId key value store
     
     - parameter eid: (path) EmojiID 
     - parameter key: (path) Key to store data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loadJson(eid: String, key: String, completion: @escaping ((_ data: LoadJsonResponse?,_ error: Error?) -> Void)) {
        loadJsonWithRequestBuilder(eid: eid, key: key).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Load value from EmojiId key value store
     - GET /emoji_id/{eid}/json/{key}
     - Any data stored previously can be retrieved as a json object in EmojiID key value store. In the case when there was no data associated with EmojiID key before it will return empty object. User should have `AdminEmojiWrite` scope or own emoji
     - examples: [{contentType=application/json, example={
  "data" : ""
}}]
     
     - parameter eid: (path) EmojiID 
     - parameter key: (path) Key to store data 

     - returns: RequestBuilder<LoadJsonResponse> 
     */
    open class func loadJsonWithRequestBuilder(eid: String, key: String) -> RequestBuilder<LoadJsonResponse> {
        var path = "/emoji_id/{eid}/json/{key}"
        let eidPreEscape = "\(eid)"
        let eidPostEscape = eidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eid}", with: eidPostEscape, options: .literal, range: nil)
        let keyPreEscape = "\(key)"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoadJsonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lookup EmojiId
     
     - parameter emojiId: (path)  
     - parameter tags: (query) Comma-separated list of tags to display, skip it to display all, e.g. &#x60;?tags&#x3D;0x0001,0x1001&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lookup(emojiId: String, tags: String? = nil, completion: @escaping ((_ data: LookupResponse?,_ error: Error?) -> Void)) {
        lookupWithRequestBuilder(emojiId: emojiId, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Lookup EmojiId
     - GET /emoji_id/{emoji_id}
     - Will filter and return data from supplied tags, If tags filter is not supplied will return all tags attached. It will also try to get views for the past month, if not available will return -1. This method is called when a user wants to look up an Emoji ID's records such as a crypto address or a redirect
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "result" : [ "{}", "{}" ],
  "stats" : [ "{}", "{}" ],
  "error" : "{}",
  "status" : true
}}]
     
     - parameter emojiId: (path)  
     - parameter tags: (query) Comma-separated list of tags to display, skip it to display all, e.g. &#x60;?tags&#x3D;0x0001,0x1001&#x60; (optional)

     - returns: RequestBuilder<LookupResponse> 
     */
    open class func lookupWithRequestBuilder(emojiId: String, tags: String? = nil) -> RequestBuilder<LookupResponse> {
        var path = "/emoji_id/{emoji_id}"
        let emojiIdPreEscape = "\(emojiId)"
        let emojiIdPostEscape = emojiIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emoji_id}", with: emojiIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tags": tags
        ])

        let requestBuilder: RequestBuilder<LookupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return random Emoji
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func random(completion: @escaping ((_ data: RandomResult?,_ error: Error?) -> Void)) {
        randomWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return random Emoji
     - GET /emoji_id/random
     - Returns price, availability and other information for random emoji
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "result" : [ "{}", "{}" ]
}}]

     - returns: RequestBuilder<RandomResult> 
     */
    open class func randomWithRequestBuilder() -> RequestBuilder<RandomResult> {
        let path = "/emoji_id/random"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RandomResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return list of recently purchased emoji
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func recent(completion: @escaping ((_ data: RecentlyPurchasedResult?,_ error: Error?) -> Void)) {
        recentWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return list of recently purchased emoji
     - GET /emoji_id/recent
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "result" : [ "{}", "{}" ]
}}]

     - returns: RequestBuilder<RecentlyPurchasedResult> 
     */
    open class func recentWithRequestBuilder() -> RequestBuilder<RecentlyPurchasedResult> {
        let path = "/emoji_id/recent"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecentlyPurchasedResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Calculate EmojiId rhythm score
     
     - parameter emojiId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rhythm(emojiId: String, completion: @escaping ((_ data: RhythmResponse?,_ error: Error?) -> Void)) {
        rhythmWithRequestBuilder(emojiId: emojiId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Calculate EmojiId rhythm score
     - GET /emoji_id/{emoji_id}/rhythm
     - The rhythm score is an indicator of a Yat's prestige, or status. Factors that affect the rhythm are length, shape, and the popularity of emojis present in the yat. The yat rhythm ranges from 1 (least prestigious) to 100 (most prestigious).
     - examples: [{contentType=application/json, example={
  "rhythm" : 0
}}]
     
     - parameter emojiId: (path)  

     - returns: RequestBuilder<RhythmResponse> 
     */
    open class func rhythmWithRequestBuilder(emojiId: String) -> RequestBuilder<RhythmResponse> {
        var path = "/emoji_id/{emoji_id}/rhythm"
        let emojiIdPreEscape = "\(emojiId)"
        let emojiIdPostEscape = emojiIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emoji_id}", with: emojiIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RhythmResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search for EmojiID
     
     - parameter emojiId: (query) Emoji ID in percent url-encoded form 
     - parameter redemptionCode: (query) Redemption code (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(emojiId: String, redemptionCode: String? = nil, completion: @escaping ((_ data: SearchResult?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(emojiId: emojiId, redemptionCode: redemptionCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search for EmojiID
     - GET /emoji_id/search
     - Returns price, availability and other information on emoji and its alternates (similar EmojiIDs that are currently available)
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "result" : "{}",
  "alternates" : [ "{}", "{}" ]
}}]
     
     - parameter emojiId: (query) Emoji ID in percent url-encoded form 
     - parameter redemptionCode: (query) Redemption code (optional)

     - returns: RequestBuilder<SearchResult> 
     */
    open class func searchWithRequestBuilder(emojiId: String, redemptionCode: String? = nil) -> RequestBuilder<SearchResult> {
        let path = "/emoji_id/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "emoji_id": emojiId, 
            "redemption_code": redemptionCode
        ])

        let requestBuilder: RequestBuilder<SearchResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Store value under EmojiId key
     
     - parameter eid: (path) EmojiID 
     - parameter key: (path) Key to store data 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeJson(eid: String, key: String, body: StoreJsonBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storeJsonWithRequestBuilder(eid: eid, key: key, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Store value under EmojiId key
     - POST /emoji_id/{eid}/json/{key}
     - Any data can be stored as a json object, this data is stored in a centralized DB and is not taking blockchain storage. In addition to unformatted data this endpoint allows to edit tags in the same way as edit endpoint allows to. User should have `AdminEmojiWrite` scope or own emoji
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     
     - parameter eid: (path) EmojiID 
     - parameter key: (path) Key to store data 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func storeJsonWithRequestBuilder(eid: String, key: String, body: StoreJsonBody) -> RequestBuilder<Void> {
        var path = "/emoji_id/{eid}/json/{key}"
        let eidPreEscape = "\(eid)"
        let eidPostEscape = eidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eid}", with: eidPostEscape, options: .literal, range: nil)
        let keyPreEscape = "\(key)"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
