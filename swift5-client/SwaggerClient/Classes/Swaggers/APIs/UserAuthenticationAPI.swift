//
// UserAuthenticationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAuthenticationAPI {
    /**
     Login via password
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(body: LoginRequest, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Login via password
     - POST /auth/token
     - Login via username/password. Will return access and refresh tokens. NOTE: when `requires_2fa` is not empty in response, provided \"refresh_token\" should be used to confirm 2FA code via `POST /auth/2fa`.
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "refresh_token" : "refresh_token",
  "requires_2fa" : "GoogleAuthenticator"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func loginWithRequestBuilder(body: LoginRequest) -> RequestBuilder<TokenResponse> {
        let path = "/auth/token"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Invalidates all user's access tokens
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logout(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        logoutWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Invalidates all user's access tokens
     - POST /logout
     - Requires `UserWriteSelf` scope
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor

     - returns: RequestBuilder<Void> 
     */
    open class func logoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Generate magic link for login
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func magicLinkLogin(body: MagicLinkLoginRequest, completion: @escaping ((_ data: MagicLinkLoginResponse?,_ error: Error?) -> Void)) {
        magicLinkLoginWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generate magic link for login
     - POST /auth/magic_link
     - Will generate and send magic link to provided user's email. Assuming the email address corresponds to a valid user
     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "Active"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<MagicLinkLoginResponse> 
     */
    open class func magicLinkLoginWithRequestBuilder(body: MagicLinkLoginRequest) -> RequestBuilder<MagicLinkLoginResponse> {
        let path = "/auth/magic_link"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MagicLinkLoginResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Refresh access token
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refreshToken(body: RefreshRequest, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        refreshTokenWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Refresh access token
     - POST /auth/token/refresh
     - Will return updated access and refresh tokens. NOTE: when `requires_2fa` is not empty in response, provided \"refresh_token\" should be used to confirm 2FA code via `POST /2fa`
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "refresh_token" : "refresh_token",
  "requires_2fa" : "GoogleAuthenticator"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func refreshTokenWithRequestBuilder(body: RefreshRequest) -> RequestBuilder<TokenResponse> {
        let path = "/auth/token/refresh"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Two factor authentication
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func twoFactorAuthentication(body: Confirm2Fa, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        twoFactorAuthenticationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Two factor authentication
     - POST /auth/2fa
     - Complete login flow when user requires 2FA. `refresh_token` obtained from a call to `/token` or `/token/refresh` should be used to complete authentication. **Note:** 2FA token has expiration timeout, which is when expired sensitive operations would require authentication via 2fa once again.
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "refresh_token" : "refresh_token",
  "requires_2fa" : "GoogleAuthenticator"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func twoFactorAuthenticationWithRequestBuilder(body: Confirm2Fa) -> RequestBuilder<TokenResponse> {
        let path = "/auth/2fa"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
