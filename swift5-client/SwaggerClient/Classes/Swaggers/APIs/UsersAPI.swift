//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UsersAPI {
    /**
     Activates a user
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activate(_id: UUID, body: ActivationParameters, completion: @escaping ((_ data: DisplayUser?,_ error: Error?) -> Void)) {
        activateWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Activates a user
     - PATCH /users/{id}/activate
     - NOTE: user should have scope `UserActivate` to activate other users
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "free_limit" : 0,
  "is_active" : true,
  "role" : "Admin",
  "deactivated_at" : "2000-01-23T04:56:07.000+00:00",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "last_name" : "last_name",
  "pubkeys" : [ "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f", "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f" ],
  "source" : "source",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "emoji_ids" : [ "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ", "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ" ],
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "alternate_id" : "alternate_id",
  "first_name" : "first_name",
  "two_factor_auth" : [ "GoogleAuthenticator", "GoogleAuthenticator" ],
  "email" : "email",
  "remaining_free_emoji" : 6
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<DisplayUser> 
     */
    open class func activateWithRequestBuilder(_id: UUID, body: ActivationParameters) -> RequestBuilder<DisplayUser> {
        var path = "/users/{id}/activate"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DisplayUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Confirm two factor authentication update
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirm2FA(body: Confirm2FaUpdate, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        confirm2FAWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm two factor authentication update
     - POST /account/2fa/confirm
     - Match 2FA code and commit two factor authentication setting for user account
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func confirm2FAWithRequestBuilder(body: Confirm2FaUpdate) -> RequestBuilder<SuccessResponse> {
        let path = "/account/2fa/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register a User
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUser(body: RegisterUserParameters, completion: @escaping ((_ data: CurrentUser?,_ error: Error?) -> Void)) {
        createUserWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register a User
     - POST /users
     - Create a user and a custodial wallet
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "organization_roles" : {
    "key" : "Admin"
  },
  "role" : "Admin",
  "pubkeys" : [ "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f", "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f" ],
  "global_scopes" : [ "adminEmoji:destroy", "adminEmoji:destroy" ],
  "organization_scopes" : {
    "key" : [ "adminEmoji:destroy", "adminEmoji:destroy" ]
  },
  "pending_transfers" : [ "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ", "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ" ],
  "user" : "{}"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<CurrentUser> 
     */
    open class func createUserWithRequestBuilder(body: RegisterUserParameters) -> RequestBuilder<CurrentUser> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CurrentUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a user
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(_id: UUID, completion: @escaping ((_ data: DisplayUser?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a user
     - DELETE /users/{id}
     - NOTE: user should have scope `UserDeleteSelf` if deleting themselves, `UserDelete` is needed for other users
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "free_limit" : 0,
  "is_active" : true,
  "role" : "Admin",
  "deactivated_at" : "2000-01-23T04:56:07.000+00:00",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "last_name" : "last_name",
  "pubkeys" : [ "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f", "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f" ],
  "source" : "source",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "emoji_ids" : [ "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ", "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ" ],
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "alternate_id" : "alternate_id",
  "first_name" : "first_name",
  "two_factor_auth" : [ "GoogleAuthenticator", "GoogleAuthenticator" ],
  "email" : "email",
  "remaining_free_emoji" : 6
}}]
     
     - parameter _id: (path)  

     - returns: RequestBuilder<DisplayUser> 
     */
    open class func deleteWithRequestBuilder(_id: UUID) -> RequestBuilder<DisplayUser> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DisplayUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable choosen 2FA provider or disable completely
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disable2FA(body: Disable2FABody, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        disable2FAWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Disable choosen 2FA provider or disable completely
     - POST /account/2fa/disable
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func disable2FAWithRequestBuilder(body: Disable2FABody) -> RequestBuilder<SuccessResponse> {
        let path = "/account/2fa/disable"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Enables two factor authentication method
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enable2FA(body: Enable2FABody, completion: @escaping ((_ data: Enable2FAResponse?,_ error: Error?) -> Void)) {
        enable2FAWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Enables two factor authentication method
     - POST /account/2fa/enable
     - Returning parameters necessary for client to store the code NOTE: This call does not take effect until code is confirmed via `POST /account/2fa/confirm` except for backup codes type which is confirmed immediately
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example={
  "ga_secret" : "ga_secret",
  "ga_qr_code_svg" : "ga_qr_code_svg"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Enable2FAResponse> 
     */
    open class func enable2FAWithRequestBuilder(body: Enable2FABody) -> RequestBuilder<Enable2FAResponse> {
        let path = "/account/2fa/enable"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Enable2FAResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Current user account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccount(completion: @escaping ((_ data: CurrentUser?,_ error: Error?) -> Void)) {
        getAccountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Current user account
     - GET /account
     - Displays the currently logged in user account details.
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "organization_roles" : {
    "key" : "Admin"
  },
  "role" : "Admin",
  "pubkeys" : [ "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f", "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f" ],
  "global_scopes" : [ "adminEmoji:destroy", "adminEmoji:destroy" ],
  "organization_scopes" : {
    "key" : [ "adminEmoji:destroy", "adminEmoji:destroy" ]
  },
  "pending_transfers" : [ "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ", "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ" ],
  "user" : "{}"
}}]

     - returns: RequestBuilder<CurrentUser> 
     */
    open class func getAccountWithRequestBuilder() -> RequestBuilder<CurrentUser> {
        let path = "/account"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CurrentUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dir
     */
    public enum Dir_getAllUsers: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    /**
     List users
     
     - parameter dir: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllUsers(dir: Dir_getAllUsers? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil, completion: @escaping ((_ data: ListOfDisplayUser?,_ error: Error?) -> Void)) {
        getAllUsersWithRequestBuilder(dir: dir, limit: limit, page: page, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List users
     - GET /users
     - NOTE: user should have scope `UserList`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "data" : [ "{}", "{}" ],
  "paging" : "{}"
}}]
     
     - parameter dir: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query)  (optional)

     - returns: RequestBuilder<ListOfDisplayUser> 
     */
    open class func getAllUsersWithRequestBuilder(dir: Dir_getAllUsers? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil) -> RequestBuilder<ListOfDisplayUser> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dir": dir?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "sort": sort
        ])

        let requestBuilder: RequestBuilder<ListOfDisplayUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send SMS 2FA code
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func send2FASms(completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        send2FASmsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send SMS 2FA code
     - POST /account/2fa/sms_code
     - If user has setup 2FA authentication via SMS this will trigger SMS with 2fa code
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func send2FASmsWithRequestBuilder() -> RequestBuilder<SuccessResponse> {
        let path = "/account/2fa/sms_code"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the currently logged in user
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: UpdateUserParameters, completion: @escaping ((_ data: CurrentUser?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update the currently logged in user
     - PATCH /account
     - NOTE: user should have scope `UserWriteSelf`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example={
  "organization_roles" : {
    "key" : "Admin"
  },
  "role" : "Admin",
  "pubkeys" : [ "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f", "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f" ],
  "global_scopes" : [ "adminEmoji:destroy", "adminEmoji:destroy" ],
  "organization_scopes" : {
    "key" : [ "adminEmoji:destroy", "adminEmoji:destroy" ]
  },
  "pending_transfers" : [ "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ", "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ" ],
  "user" : "{}"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<CurrentUser> 
     */
    open class func updateWithRequestBuilder(body: UpdateUserParameters) -> RequestBuilder<CurrentUser> {
        let path = "/account"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CurrentUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a user as an admin
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(_id: UUID, body: AdminUpdateUserParameters, completion: @escaping ((_ data: DisplayUser?,_ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a user as an admin
     - PATCH /users/{id}
     - NOTE: user should have scope `UserWrite`
     - API Key:
       - type: apiKey Authorization,X-Api-Key 
       - name: apiKey
     - API Key:
       - type: apiKey Authorization 
       - name: two_factor
     - examples: [{contentType=application/json, example={
  "free_limit" : 0,
  "is_active" : true,
  "role" : "Admin",
  "deactivated_at" : "2000-01-23T04:56:07.000+00:00",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "last_name" : "last_name",
  "pubkeys" : [ "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f", "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f" ],
  "source" : "source",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "emoji_ids" : [ "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ", "ðŸ±ðŸ‰ðŸ‹ðŸ´ðŸµ" ],
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "alternate_id" : "alternate_id",
  "first_name" : "first_name",
  "two_factor_auth" : [ "GoogleAuthenticator", "GoogleAuthenticator" ],
  "email" : "email",
  "remaining_free_emoji" : 6
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<DisplayUser> 
     */
    open class func updateUserWithRequestBuilder(_id: UUID, body: AdminUpdateUserParameters) -> RequestBuilder<DisplayUser> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DisplayUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
