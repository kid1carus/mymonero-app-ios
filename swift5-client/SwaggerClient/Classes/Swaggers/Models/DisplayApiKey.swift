//
// DisplayApiKey.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct DisplayApiKey: Codable {

    public enum Scopes: String, Codable { 
        case adminemojiDestroy = "adminEmoji:destroy"
        case adminemojiRegister = "adminEmoji:register"
        case adminemojiTransfer = "adminEmoji:transfer"
        case adminemojiWrite = "adminEmoji:write"
        case adminlootboxRead = "adminLootbox:read"
        case adminlootboxWrite = "adminLootbox:write"
        case adminuserRoleupdate = "adminUser:roleUpdate"
        case cartShow = "cart:show"
        case cartUpdate = "cart:update"
        case codeDelete = "code:delete"
        case codeRead = "code:read"
        case codeWrite = "code:write"
        case userCreateapikey = "user:createApiKey"
        case emojigroupsDelete = "emojiGroups:delete"
        case emojigroupsRead = "emojiGroups:read"
        case emojigroupsWrite = "emojiGroups:write"
        case lootboxUse = "lootbox:use"
        case orderPaymentoverride = "order:paymentOverride"
        case orderRead = "order:read"
        case orderReadself = "order:readSelf"
        case orderRefund = "order:refund"
        case orderRefundoverride = "order:refundOverride"
        case orderResendconfirmation = "order:resendConfirmation"
        case organizationAdmin = "organization:admin"
        case organizationcodeAdmin = "organizationCode:admin"
        case organizationemojiList = "organizationEmoji:list"
        case organizationemojiWrite = "organizationEmoji:write"
        case organizationlistRead = "organizationList:read"
        case organizationRead = "organization:read"
        case organizationuserAdmin = "organizationUser:admin"
        case organizationuserRead = "organizationUser:read"
        case organizationWrite = "organization:write"
        case paymentmethodDestroy = "paymentMethod:destroy"
        case paymentmethodRead = "paymentMethod:read"
        case paymentmethodSetdefault = "paymentMethod:setDefault"
        case refundRead = "refund:read"
        case tokenRefresh = "token:refresh"
        case authTwofactor = "auth:twoFactor"
        case userActivate = "user:activate"
        case userDelete = "user:delete"
        case userDeleteself = "user:deleteSelf"
        case useremailVerify = "userEmail:verify"
        case useremojiList = "userEmoji:list"
        case userinterestDelete = "userInterest:delete"
        case userinterestRead = "userInterest:read"
        case userinterestWrite = "userInterest:write"
        case userList = "user:list"
        case userpubkeysList = "userPubkeys:list"
        case userpubkeysWrite = "userPubkeys:write"
        case userWrite = "user:write"
        case userWriteself = "user:writeSelf"
    }
    public var apiKey: String
    public var createdAt: Date
    public var expiresAt: Date?
    public var name: String
    public var scopes: [Scopes]

    public init(apiKey: String, createdAt: Date, expiresAt: Date?, name: String, scopes: [Scopes]) {
        self.apiKey = apiKey
        self.createdAt = createdAt
        self.expiresAt = expiresAt
        self.name = name
        self.scopes = scopes
    }

    public enum CodingKeys: String, CodingKey { 
        case apiKey = "api_key"
        case createdAt = "created_at"
        case expiresAt = "expires_at"
        case name
        case scopes
    }


}

