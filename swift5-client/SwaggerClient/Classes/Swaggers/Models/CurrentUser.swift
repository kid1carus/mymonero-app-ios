//
// CurrentUser.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct CurrentUser: Codable {

    public enum GlobalScopes: String, Codable { 
        case adminemojiDestroy = "adminEmoji:destroy"
        case adminemojiRegister = "adminEmoji:register"
        case adminemojiTransfer = "adminEmoji:transfer"
        case adminemojiWrite = "adminEmoji:write"
        case adminlootboxRead = "adminLootbox:read"
        case adminlootboxWrite = "adminLootbox:write"
        case adminuserRoleupdate = "adminUser:roleUpdate"
        case cartShow = "cart:show"
        case cartUpdate = "cart:update"
        case codeDelete = "code:delete"
        case codeRead = "code:read"
        case codeWrite = "code:write"
        case userCreateapikey = "user:createApiKey"
        case emojigroupsDelete = "emojiGroups:delete"
        case emojigroupsRead = "emojiGroups:read"
        case emojigroupsWrite = "emojiGroups:write"
        case lootboxUse = "lootbox:use"
        case orderPaymentoverride = "order:paymentOverride"
        case orderRead = "order:read"
        case orderReadself = "order:readSelf"
        case orderRefund = "order:refund"
        case orderRefundoverride = "order:refundOverride"
        case orderResendconfirmation = "order:resendConfirmation"
        case organizationAdmin = "organization:admin"
        case organizationcodeAdmin = "organizationCode:admin"
        case organizationemojiList = "organizationEmoji:list"
        case organizationemojiWrite = "organizationEmoji:write"
        case organizationlistRead = "organizationList:read"
        case organizationRead = "organization:read"
        case organizationuserAdmin = "organizationUser:admin"
        case organizationuserRead = "organizationUser:read"
        case organizationWrite = "organization:write"
        case paymentmethodDestroy = "paymentMethod:destroy"
        case paymentmethodRead = "paymentMethod:read"
        case paymentmethodSetdefault = "paymentMethod:setDefault"
        case refundRead = "refund:read"
        case tokenRefresh = "token:refresh"
        case authTwofactor = "auth:twoFactor"
        case userActivate = "user:activate"
        case userDelete = "user:delete"
        case userDeleteself = "user:deleteSelf"
        case useremailVerify = "userEmail:verify"
        case useremojiList = "userEmoji:list"
        case userinterestDelete = "userInterest:delete"
        case userinterestRead = "userInterest:read"
        case userinterestWrite = "userInterest:write"
        case userList = "user:list"
        case userpubkeysList = "userPubkeys:list"
        case userpubkeysWrite = "userPubkeys:write"
        case userWrite = "user:write"
        case userWriteself = "user:writeSelf"
    }
    public enum OrganizationRoles: String, Codable { 
        case admin = "Admin"
        case orgController = "OrgController"
        case orgMember = "OrgMember"
        case orgOwner = "OrgOwner"
        case bot = "Bot"
        case _super = "Super"
        case user = "User"
    }
    public enum OrganizationScopes: String, Codable { 
        case adminemojiDestroy = "adminEmoji:destroy"
        case adminemojiRegister = "adminEmoji:register"
        case adminemojiTransfer = "adminEmoji:transfer"
        case adminemojiWrite = "adminEmoji:write"
        case adminlootboxRead = "adminLootbox:read"
        case adminlootboxWrite = "adminLootbox:write"
        case adminuserRoleupdate = "adminUser:roleUpdate"
        case cartShow = "cart:show"
        case cartUpdate = "cart:update"
        case codeDelete = "code:delete"
        case codeRead = "code:read"
        case codeWrite = "code:write"
        case userCreateapikey = "user:createApiKey"
        case emojigroupsDelete = "emojiGroups:delete"
        case emojigroupsRead = "emojiGroups:read"
        case emojigroupsWrite = "emojiGroups:write"
        case lootboxUse = "lootbox:use"
        case orderPaymentoverride = "order:paymentOverride"
        case orderRead = "order:read"
        case orderReadself = "order:readSelf"
        case orderRefund = "order:refund"
        case orderRefundoverride = "order:refundOverride"
        case orderResendconfirmation = "order:resendConfirmation"
        case organizationAdmin = "organization:admin"
        case organizationcodeAdmin = "organizationCode:admin"
        case organizationemojiList = "organizationEmoji:list"
        case organizationemojiWrite = "organizationEmoji:write"
        case organizationlistRead = "organizationList:read"
        case organizationRead = "organization:read"
        case organizationuserAdmin = "organizationUser:admin"
        case organizationuserRead = "organizationUser:read"
        case organizationWrite = "organization:write"
        case paymentmethodDestroy = "paymentMethod:destroy"
        case paymentmethodRead = "paymentMethod:read"
        case paymentmethodSetdefault = "paymentMethod:setDefault"
        case refundRead = "refund:read"
        case tokenRefresh = "token:refresh"
        case authTwofactor = "auth:twoFactor"
        case userActivate = "user:activate"
        case userDelete = "user:delete"
        case userDeleteself = "user:deleteSelf"
        case useremailVerify = "userEmail:verify"
        case useremojiList = "userEmoji:list"
        case userinterestDelete = "userInterest:delete"
        case userinterestRead = "userInterest:read"
        case userinterestWrite = "userInterest:write"
        case userList = "user:list"
        case userpubkeysList = "userPubkeys:list"
        case userpubkeysWrite = "userPubkeys:write"
        case userWrite = "user:write"
        case userWriteself = "user:writeSelf"
    }
    public enum Role: String, Codable { 
        case admin = "Admin"
        case orgController = "OrgController"
        case orgMember = "OrgMember"
        case orgOwner = "OrgOwner"
        case bot = "Bot"
        case _super = "Super"
        case user = "User"
    }
    /** A list of fine-grained permissions the user may perform. */
    public var globalScopes: [GlobalScopes]
    /** The role this user has in each organisation. Organisations are currently not used, but are reserved for  future operations. */
    public var organizationRoles: [String:String]
    /** The scopes that are granted to this user for each organisation. Organisations are currently not used, but are  reserved for future operations. */
    public var organizationScopes: [String:[String]]
    /** List of transfers pending acceptance on current user side */
    public var pendingTransfers: [String]
    /** A list of this user&#39;s public keys. When yats are deployed to the blockchain, users prove ownership of their  Yats with digital signatures, proving knowledge of the private keys that \&quot;own\&quot; the yat. In the centralised  implementation of Yat, the server will custody the users&#39; wallets and private keys, but in other respects the  ownership model is the same. */
    public var pubkeys: [String]
    /** The role assigned to this user. Roles grant authority to user accounts to perform certain actions. */
    public var role: Role
    /** The current user&#39;s details */
    public var user: JSONValue

    public init(globalScopes: [GlobalScopes], organizationRoles: [String:String], organizationScopes: [String:[String]], pendingTransfers: [String], pubkeys: [String], role: Role, user: JSONValue) {
        self.globalScopes = globalScopes
        self.organizationRoles = organizationRoles
        self.organizationScopes = organizationScopes
        self.pendingTransfers = pendingTransfers
        self.pubkeys = pubkeys
        self.role = role
        self.user = user
    }

    public enum CodingKeys: String, CodingKey { 
        case globalScopes = "global_scopes"
        case organizationRoles = "organization_roles"
        case organizationScopes = "organization_scopes"
        case pendingTransfers = "pending_transfers"
        case pubkeys
        case role
        case user
    }


}

